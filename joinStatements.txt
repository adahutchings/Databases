Exercises

1. How do you find related data held in two separate data tables?
	By using a JOIN statement.

2. Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.
	INNER JOIN - This returns of all overlapping information. You have 2 tables that show cat and dog owners respectively. You would like to see the names of people who own both a dog and a cat. 
	LEFT OUTER JOIN - This returns the overlapping information plus the information in the left table. You would like to see the names off all the cat owners, plus the owners of dogs who also own a cat and the pets names. 
	RIGHT OUTER JOIN - This returns the overlapping information plus the information in the right table. You would like to see all the owners of dogs, plus the owners of cats who also own a dog and the pets names.  

3. Define primary key and foreign key. Give a real-world example for each.
	Primary Key - The unique identifier. This could be the username for an email directory. Each email will be distinct from one another. 
	Foreign Key - References data field in one table that refers to (usually) the primary key in another table. This could be in a user database of employee emails. With two tables one with department id, name and email, the other with  employee id and department id. When joining the tables the employee id would be the foreign id. 

4. Define aliasing.
	A type of abbreviation to shorten table names. 

5. Change this query so that you are using aliasing:
	SLECT professor.name, compensation.salary, compensation.vacation_days 
	FROM professor 
	JOIN compensation ON professor.id = compensation.professor_id;

	SELECT p.name, c.salary, c.vacation_days
	FROM professor AS p
	JOIN compensation AS c
	ON p.id = c.professor_id;

6. Why would you use a NATURAL JOIN? Give a real-world example.
	If you would like to join all matching columns from both tables. In two tables, one with cats one with dogs, both containing: owner, pet name, years owned, gender. You could NATURAL JOIN to create the output of all dog and cat owners together and it would include the pet names, years owned, and gender. 

7. Using this adoption Employee schema and data, write queries to find the following information:
	-List all employees and all shifts.
	
		SELECT employees.name, shifts.date, shifts.start_time, shifts.end_time
		FROM employees
		FULL OUTER JOIN shifts
		ON employees.id = shifts.id;


8. Using this adoption schema and data, please write queries to retrieve the following information and include the results:
	-Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.

		SELECT v.first_name, v.last_name, d.name AS dog_name
		FROM volunteers AS v
		JOIN dogs AS d
		ON v.foster_dog_id = d.id;	

	-The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.
		SELECT cats.name, adopters.first_name, adopters.last_name, cat_adoptions.date
		FROM cat_adoptions
		JOIN cats ON cats.id = cat_adoptions.cat_id
		JOIN adopters ON adopters.id = cat_adoptions.adopter_id
		WHERE date > CURRENT_DATE - INTERVAL '30 DAYS';
	
	-Create a list of adopters who have not yet chosen a dog to adopt.
		SELECT adopters.first_name, adopters.last_name
		FROM adopters
		LEFT JOIN dog_adoptions
		ON adopters.id = dog_adoptions.adopter_id  
		WHERE dog_adoptions.adopter_id IS NULL;
	-List all cats and all dogs who have not been adopted.
		SELECT cats.name, cats.id
		FROM cat_adoptions   
		RIGHT JOIN cats ON cats.id = cat_adoptions.cat_id
		WHERE cat_adoptions.adopter_id IS null;

		SELECT dogs.name, dogs.id
		FROM dog_adoptions
		RIGHT JOIN dogs on dogs.id = dog_adoptions.dog_id
		WHERE dog_adoptions.adopter_id IS null;


	-The name of the person who adopted Rosco.
		SELECT a.first_name, a.last_name, d.name AS dog_name
		FROM adopters as a
		JOIN dog_adoptions as da ON a.id = da.adopter_id
		JOIN dogs AS d ON da.dog_id = d.id
		WHERE d.name = 'Rosco';

9.Using this Library schema and data, write queries applying the following scenarios and include the results:	
	-To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all the patrons with a hold (request for a book with all copies check out) on "Advanced Potion-Making". 
		SELECT patrons.name, holds.rank, books.title
		FROM holds 
		JOIN patrons ON patrons.id = holds.patron_id
		JOIN books ON books.isbn = holds.isbn
		WHERE books.title = 'Advanced Potion-Making'
		ORDER BY holds.rank;

	-List all of the library patrons. If they have one or more books checked out, list the books with the patrons.
		SELECT patrons.name,  books.title, transactions.checked_in_date
		FROM transactions
		FULL OUTER JOIN patrons ON patrons.id = transactions.patron_id
		FULL OUTER JOIN books ON books.isbn = transactions.isbn
        ORDER BY patrons.name ASC;






